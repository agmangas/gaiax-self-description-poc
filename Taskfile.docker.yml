version: "3"

vars:
  CERTS_DIR: "{{.ROOT_DIR}}/certs"
  STATIC_ROOT: "{{.ROOT_DIR}}/htdocs"
  STATIC_PATH: .well-known
  CREDENTIAL_SERVER_CONTAINER_NAME: gaiax-credential-server

env:
  PATH_CERTIFICATE: "{{.CERTS_DIR}}/cert.pem"
  PATH_PRIVATE_KEY: "{{.CERTS_DIR}}/privkey.pem"
  BASE_URL: "https://{{.CERTBOT_DOMAIN}}/{{.STATIC_PATH}}"
  WEBSERVER_DIR: "{{.STATIC_ROOT}}/{{.STATIC_PATH}}"
  DID_WEB_ID:
    sh: if [[ "{{.STATIC_PATH}}" == ".well-known" ]]; then echo "did:web:{{.CERTBOT_DOMAIN}}"; else echo "did:web:{{.CERTBOT_DOMAIN}}:{{.STATIC_PATH}}"; fi

# Create a dotenv .env file in the root folder
# to override the default values defined in .env.default
dotenv: [.env, .env.default]

includes:
  common:
    taskfile: Taskfile.common.yml
    flatten: true

tasks:
  get-certs:
    desc: Get the SSL certificates from Let's Encrypt
    cmds:
      - >
        certbot
        --preferred-chain="ISRG Root X1"
        certonly
        --standalone -n --agree-tos --key-type rsa --email {{.CERTBOT_EMAIL}} -d {{.CERTBOT_DOMAIN}}
      - mkdir -p {{.CERTS_DIR}}
      - cp -Lr /etc/letsencrypt/live/{{.CERTBOT_DOMAIN}}/* {{.CERTS_DIR}}
      # We need to add the root certificate to the chain for the Compliance request to work
      # Note that we indicated that we want to use the "ISRG Root X1" root using the preferred-chain option
      - wget https://letsencrypt.org/certs/isrgrootx1.pem -O {{.CERTS_DIR}}/isrgrootx1.pem
      - cp {{.CERTS_DIR}}/fullchain.pem {{.STATIC_ROOT}}/{{.STATIC_PATH}}/${FILENAME_X5U}
      - cat {{.CERTS_DIR}}/isrgrootx1.pem >> {{.STATIC_ROOT}}/{{.STATIC_PATH}}/${FILENAME_X5U}

  start-webserver:
    internal: true
    desc: Build the DID and x.509 certificate chain and then start the NGINX web server
    cmds:
      - task: build-did
      - nginx -c /app/nginx.conf

  build-credential-server-image:
    desc: Build a container image that calls Gaia-X to generate the VP and serves it
    cmds:
      - apt remove --purge -y nginx task
      - rm -rf /etc/nginx /var/lib/nginx /var/log/nginx /app/node_modules
      - cp -a /app /server
      - executor -c /server --dockerfile /server/Dockerfile.server --no-push --destination {{ .CREDENTIAL_SERVER_CONTAINER_NAME }} --tar-path /out/image.tar
      - >-
        printf '\n\nLoad the container with:\n\ndocker load -i image.tar\n\nAnd run it with:\n\ndocker run -it --rm -p 443:443 {{ .CREDENTIAL_SERVER_CONTAINER_NAME }}\n\n'
